!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_MAX	transport.h	36;"	d
CPPFLAGS	Makefile	/^CPPFLAGS=-DNDEBUG$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-g -std=c++0x -Wall -Wextra -Werror$/;"	m
HANDLE_H	handle.h	6;"	d
LDFLAGS	Makefile	/^LDFLAGS=-pthread -llogging -lyajl$/;"	m
MAIN_H	main.h	6;"	d
MAX_EVENTS	task.cc	8;"	d	file:
SIZE	transport.h	34;"	d
TASK_H	task.h	6;"	d
TRANSPORT_H	transport.h	6;"	d
Transport	transport.h	/^		Transport(int fd, time_t created, struct sockaddr_in peer_addr, socklen_t peer_addrlen, size_t size = SIZE) {$/;"	f	class:Transport
Transport	transport.h	/^class Transport {$/;"	c
WIDTH	transport.h	31;"	d
addr	task.cc	/^struct sockaddr_in addr;$/;"	v	typeref:struct:sockaddr_in
alive	transport.h	/^		bool alive; \/* true: live; false: die *\/$/;"	m	class:Transport
appchat_yajl_gen_string	handle.cc	/^yajl_gen_status appchat_yajl_gen_string(yajl_gen hand, const char * str, size_t len) {$/;"	f
appid	transport.h	/^		std::string appid; \/* AppChat Unique ID *\/$/;"	m	class:Transport
author	version.h	/^const char *author = "Ni BaoZhu";$/;"	v
clear_rx	transport.h	/^		void *clear_rx(size_t size = SIZE) {$/;"	f	class:Transport
clear_wx	transport.h	/^		void *clear_wx(size_t size = SIZE) {$/;"	f	class:Transport
command	transport.h	/^		std::string command; \/* AppChatProtocol Command *\/$/;"	m	class:Transport
context	transport.h	/^		std::string context;$/;"	m	class:Transport
created	transport.h	/^		time_t created; \/* the first communication time *\/$/;"	m	class:Transport
dtime	transport.h	/^		std::string dtime;$/;"	m	class:Transport
email	version.h	/^const char *email = "nibz@qq.com";$/;"	v
epollfd	task.cc	/^int listen_sock, nfds, epollfd;$/;"	v
errcode	transport.h	/^		std::string errcode;$/;"	m	class:Transport
errstring	transport.h	/^		std::string errstring;$/;"	m	class:Transport
ev	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:epoll_event
events	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:
events	transport.h	/^		__uint32_t events;$/;"	m	class:Transport
fd	transport.h	/^		int fd; \/* file descriptor *\/$/;"	m	class:Transport
get_alive	transport.h	/^		bool get_alive() {$/;"	f	class:Transport
get_events	transport.h	/^		__uint32_t get_events() {$/;"	f	class:Transport
get_fd	transport.h	/^		int get_fd() {$/;"	f	class:Transport
get_peer	transport.h	/^		struct sockaddr_in get_peer(struct sockaddr_in *peer_addr, socklen_t *peer_addrlen) {$/;"	f	class:Transport
get_rp	transport.h	/^		size_t get_rp() {$/;"	f	class:Transport
get_rs	transport.h	/^		size_t get_rs() {$/;"	f	class:Transport
get_rx	transport.h	/^		void *get_rx() {$/;"	f	class:Transport
get_updated	transport.h	/^		time_t get_updated() {$/;"	f	class:Transport
get_wp	transport.h	/^		size_t get_wp() {$/;"	f	class:Transport
get_ws	transport.h	/^		size_t get_ws() {$/;"	f	class:Transport
get_wx	transport.h	/^		void *get_wx() {$/;"	f	class:Transport
handle	handle.cc	/^int handle(std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *__m, Transport* t) {$/;"	f
handler	task.cc	/^void handler(int signum) {$/;"	f
home	version.h	/^const char *home = "https:\/\/github.com\/nibaozhu\/mycode";$/;"	v
init	task.cc	/^int init(int argc, char **argv) {$/;"	f
ip	task.cc	/^char ip[16] = "0.0.0.0";$/;"	v
is_reconfigure	task.cc	/^bool is_reconfigure;$/;"	v
listen_sock	task.cc	/^int listen_sock, nfds, epollfd;$/;"	v
main	main.cc	/^int main(int argc, char **argv) {$/;"	f
nfds	task.cc	/^int listen_sock, nfds, epollfd;$/;"	v
passwd	transport.h	/^		std::string passwd;$/;"	m	class:Transport
peer_addr	transport.h	/^		struct sockaddr_in peer_addr;$/;"	m	class:Transport	typeref:struct:Transport::sockaddr_in
peer_addrlen	transport.h	/^		socklen_t peer_addrlen;$/;"	m	class:Transport
port	task.cc	/^short int port = 12340;$/;"	v
printread	transport.h	/^		void printread(size_t width = WIDTH) {$/;"	f	class:Transport
printwrite	transport.h	/^		void printwrite(size_t width = WIDTH) {$/;"	f	class:Transport
quit	task.cc	/^bool quit;$/;"	v
reads	task.cc	/^int reads(Transport* t) {$/;"	f
receiver	transport.h	/^		std::string receiver;$/;"	m	class:Transport
reset	transport.h	/^		void reset() {$/;"	f	class:Transport
rp	transport.h	/^		size_t rp; \/* transport data `Read' pointer position *\/$/;"	m	class:Transport
rs	transport.h	/^		size_t rs; \/* transport data `Read' size  *\/$/;"	m	class:Transport
rx	transport.h	/^		void *rx; \/* transport data `Read'  *\/$/;"	m	class:Transport
sender	transport.h	/^		std::string sender;$/;"	m	class:Transport
set_alive	transport.h	/^		bool set_alive(bool alive) {$/;"	f	class:Transport
set_disposition	task.cc	/^void set_disposition() {$/;"	f
set_events	transport.h	/^		__uint32_t set_events(__uint32_t events) {$/;"	f	class:Transport
set_fd	transport.h	/^		int set_fd(int fd) {$/;"	f	class:Transport
set_peer	transport.h	/^		struct sockaddr_in set_peer(struct sockaddr_in peer_addr, socklen_t peer_addrlen) {$/;"	f	class:Transport
set_rp	transport.h	/^		size_t set_rp(size_t rp) {$/;"	f	class:Transport
set_rs	transport.h	/^		size_t set_rs(size_t rs) {$/;"	f	class:Transport
set_rx	transport.h	/^		void *set_rx(void *rx, size_t rs) {$/;"	f	class:Transport
set_updated	transport.h	/^		time_t set_updated() {$/;"	f	class:Transport
set_wp	transport.h	/^		size_t set_wp(size_t wp) {$/;"	f	class:Transport
set_ws	transport.h	/^		size_t set_ws(size_t ws) {$/;"	f	class:Transport
set_wx	transport.h	/^		void *set_wx(void *wx, size_t ws) {$/;"	f	class:Transport
setnonblocking	task.cc	/^int setnonblocking(int fd) {$/;"	f
task	task.cc	/^int task(int argc, char **argv) {$/;"	f
task_r	task.cc	/^void task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m) {$/;"	f
task_w	task.cc	/^void task_w(std::list<Transport*> *w) {$/;"	f
task_x	task.cc	/^void task_x(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *__m) {$/;"	f
uninit	task.cc	/^int uninit(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *__m) {$/;"	f
updated	transport.h	/^		time_t updated; \/* the lastest communication time *\/$/;"	m	class:Transport
version	version.h	/^const char *version = "1.0-unstable";$/;"	v
wp	transport.h	/^		size_t wp; \/* transport data `Write' pointer position *\/$/;"	m	class:Transport
writes	task.cc	/^void writes(Transport* t) {$/;"	f
ws	transport.h	/^		size_t ws; \/* transport data `Write' size *\/$/;"	m	class:Transport
wx	transport.h	/^		void *wx; \/* transport data `Write' *\/$/;"	m	class:Transport
~Transport	transport.h	/^		~Transport() {$/;"	f	class:Transport
