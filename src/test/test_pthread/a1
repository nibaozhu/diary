diff --git a/src/test/test_pthread/CMakeLists.txt b/src/test/test_pthread/CMakeLists.txt
index f83089b..e112d0b 100644
--- a/src/test/test_pthread/CMakeLists.txt
+++ b/src/test/test_pthread/CMakeLists.txt
@@ -1,9 +1,9 @@
 cmake_minimum_required (VERSION 2.8)
 
-project (chat)
+project (dog)
 
 	list (APPEND SRC 
-			chat.c
+			dog.c
 			task.c
 	     )
 
diff --git a/src/test/test_pthread/Makefile b/src/test/test_pthread/Makefile
index 559fae8..0e8d71a 100644
--- a/src/test/test_pthread/Makefile
+++ b/src/test/test_pthread/Makefile
@@ -4,9 +4,9 @@ OUTPUT_OPT   = -o
 LDFLAGS      = -pthread
 
 MAKEFILE     = Makefile
-PROGRAM      = chat
-ALL_HEADERS  = chat.h common.h task.h
-ALL_SOURCES  = chat.c task.c
+PROGRAM      = dog
+ALL_HEADERS  = dog.h common.h task.h
+ALL_SOURCES  = dog.c task.c
 ALL_OBJECTS  = $(subst .c,.o, $(ALL_SOURCES))
 RM_OPT       = --force --recursive
 
@@ -37,5 +37,5 @@ install: $(PROGRAM)
 ###########################################################
 # NOTE: DO NOT EDIT, autogen by `gcc -MM *.c'
 ###########################################################
-chat.o: chat.c chat.h common.h task.h
+dog.o: dog.c dog.h common.h task.h
 task.o: task.c task.h
diff --git a/src/test/test_pthread/README.md b/src/test/test_pthread/README.md
index a1f35ad..37694aa 100644
--- a/src/test/test_pthread/README.md
+++ b/src/test/test_pthread/README.md
@@ -1,4 +1,4 @@
-chat
+dog
 ===============
 
 #### Create the build directory
@@ -21,11 +21,11 @@ To disable optimizations and build a more debugging-friendly version:
 
     ~/test_pthread/build$ cmake ../ -DCMAKE_INSTALL_PREFIX=/usr/local/ -DCMAKE_BUILD_TYPE=Debug
 
-#### Build chat
+#### Build dog
 
     ~/test_pthread/build$ make
 
 This will generate a few binaries:
 
- - `chat`:
+ - `dog`:
 
diff --git a/src/test/test_pthread/common.h b/src/test/test_pthread/common.h
index 985a8c7..8d29f13 100644
--- a/src/test/test_pthread/common.h
+++ b/src/test/test_pthread/common.h
@@ -20,15 +20,15 @@
 #include <libgen.h>
 
 
-typedef struct chat_s {
+typedef struct dog_s {
 	char name[NAME_MAX];
 	size_t number;
 	pthread_t *pthread;
 
 	/* worker should gone */
 	bool bankruptcy;
-} chat_t;
-extern chat_t chat;
+} dog_t;
+extern dog_t dog;
 
 typedef struct task_s {
 	size_t ID;
diff --git a/src/test/test_pthread/dog.c b/src/test/test_pthread/dog.c
index a4fcc61..ae53af6 100644
--- a/src/test/test_pthread/dog.c
+++ b/src/test/test_pthread/dog.c
@@ -1,8 +1,8 @@
-#include "chat.h"
+#include "dog.h"
 
 
 /* Set sub-thread ... */
-chat_t chat = { .name = "Happiness", .number = 0x10, .bankruptcy = false };
+dog_t dog = { .name = "Happiness", .number = 0x10, .bankruptcy = false };
 
 void handler(int signum) {
 	pid_t ppid, pid, tid;
@@ -20,7 +20,7 @@ void handler(int signum) {
 		case SIGTERM:
 		case SIGUSR1:
 		case SIGUSR2:
-			if (pid == tid) chat.bankruptcy = true; // FIXME: rwlock
+			if (pid == tid) dog.bankruptcy = true; // FIXME: rwlock
 			break;
 		default: ; /* do nothing */
 	}
@@ -56,9 +56,9 @@ int main(int argc, char **argv) {
 	// }
 
 	set_disposition();
-	chat.pthread = 
-		(pthread_t *)malloc(chat.number * sizeof(pthread_t));
-	if (chat.pthread == NULL) return EXIT_FAILURE;
+	dog.pthread = 
+		(pthread_t *)malloc(dog.number * sizeof(pthread_t));
+	if (dog.pthread == NULL) return EXIT_FAILURE;
 
 	pthread_attr_t *attr = 
 		(pthread_attr_t *)malloc(sizeof(pthread_attr_t));
@@ -71,7 +71,7 @@ int main(int argc, char **argv) {
 	}
 
 	size_t i;
-	for (i = 0; i < chat.number; i++) {
+	for (i = 0; i < dog.number; i++) {
 
 		/* info_t will be freed at sub-thread. */
 		info_t *info = (info_t*)malloc(sizeof(info_t));
@@ -80,9 +80,9 @@ int main(int argc, char **argv) {
 		SLIST_INIT(info->task_slist);
 
 		void *arg = info;
-		void *(*start_routine) (void *) = do_receive;
+		void *(*start_routine) (void *) = do_task;
 
-		r = pthread_create(chat.pthread + i, (const pthread_attr_t *)attr,
+		r = pthread_create(dog.pthread + i, (const pthread_attr_t *)attr,
 						start_routine, arg);
 		if (r != 0) {
 			syslog(LOG_ERR, "%s(%d)\n", strerror(errno), errno);
@@ -91,7 +91,7 @@ int main(int argc, char **argv) {
 
 		/* XXX: `arg' maybe had been freed, and we just look it. */
 		syslog(LOG_NOTICE, "created: Thread[%lu]:0x%lx, arg:%p\n", 
-			i, *(chat.pthread + i), arg);
+			i, *(dog.pthread + i), arg);
 	}
 
 	r = pthread_attr_destroy(attr);
@@ -101,18 +101,18 @@ int main(int argc, char **argv) {
 	}
 	free(attr);
 
-	for (i = 0; i < chat.number; i++) {
-		size_t j = chat.number - (i + 1);
-		r = pthread_join(*(chat.pthread + j), NULL);
+	for (i = 0; i < dog.number; i++) {
+		size_t j = dog.number - (i + 1);
+		r = pthread_join(*(dog.pthread + j), NULL);
 		if (r != 0) {
 			syslog(LOG_ERR, "%s(%d)\n", strerror(errno), errno);
 			continue;
 		}
 
 		syslog(LOG_NOTICE, "join: Thread[%lu]:0x%lx\n", 
-			j, *(chat.pthread + j));
+			j, *(dog.pthread + j));
 	}
-	free(chat.pthread);
+	free(dog.pthread);
 
 	closelog();
 	return EXIT_SUCCESS;
diff --git a/src/test/test_pthread/logrotate.d/chat b/src/test/test_pthread/logrotate.d/chat
index 7b78795..a5788ac 100644
--- a/src/test/test_pthread/logrotate.d/chat
+++ b/src/test/test_pthread/logrotate.d/chat
@@ -1,4 +1,4 @@
-/var/log/chat/chat.log {
+/var/log/dog/dog.log {
     rotate 5
     daily
     size 10M
diff --git a/src/test/test_pthread/task.c b/src/test/test_pthread/task.c
index 7699b79..85d4364 100644
--- a/src/test/test_pthread/task.c
+++ b/src/test/test_pthread/task.c
@@ -1,7 +1,7 @@
 #include "task.h"
 
 
-void *do_receive(void *arg) {
+void *do_task(void *arg) {
 	syslog(LOG_DEBUG, "Entering ...\n");
 
 	syslog(LOG_NOTICE, "arg: %p", arg);
@@ -9,7 +9,7 @@ void *do_receive(void *arg) {
 	info_t *info = (info_t*)arg;
 
 	// int j;
-	// for (j = 0; j < chat.number; j++) {
+	// for (j = 0; j < dog.number; j++) {
 	// 	task_t *task = (task_t*)malloc(sizeof(task_t));
 	// 	if (task == NULL) return EXIT_FAILURE;
 
@@ -21,9 +21,9 @@ void *do_receive(void *arg) {
 	// }
 
 	while (true) {
-		doing(info->task_slist);
+		task_execute(info->task_slist);
 
-		if (chat.bankruptcy) break;
+		if (dog.bankruptcy) break;
 	}
 
 	free(arg);
@@ -31,7 +31,7 @@ void *do_receive(void *arg) {
 	return NULL;
 }
 
-int doing(struct task_slist_s *task_slist) {
+int task_execute(struct task_slist_s *task_slist) {
 	size_t i = 0;
 	task_t *task;
 	SLIST_FOREACH(task, task_slist, entry) {
diff --git a/src/test/test_pthread/task.h b/src/test/test_pthread/task.h
index 9f41e16..4ef1c26 100644
--- a/src/test/test_pthread/task.h
+++ b/src/test/test_pthread/task.h
@@ -2,12 +2,7 @@
 #define TASK_H
 
 
-void *do_receive(void *arg);
-
-void *do_transit(void *arg);
-
-void *do_send(void *arg);
-
+void *do_task(void *arg);
 
 #include "common.h"
 
