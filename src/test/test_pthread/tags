!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A_H	./a.h	2;"	d
COMMON_H	./common.h	2;"	d
DATE_MAX	./logging.h	41;"	d
LOGGING_H	./logging.h	9;"	d
MODE_MAX	./logging.h	40;"	d
RECEPTION_H	./reception.h	2;"	d
SIZE_MAX	./logging.h	16;"	d
SIZE_MAX	./logging.h	18;"	d
WAITER_H	./waiter.h	2;"	d
_GNU_SOURCE	./reception.h	8;"	d
_GNU_SOURCE	./waiter.h	8;"	d
__plog	./logging.c	/^int __plog(enum elevel x, const char *__file, unsigned int __line, const char *__function, const char *fmt, ...)$/;"	f
a_s	./a.h	/^typedef struct a_s {$/;"	s
a_t	./a.h	/^} a_t;$/;"	t	typeref:struct:a_s
alert	./logging.h	/^	alert,			\/* action must be taken immediately *\/$/;"	e	enum:elevel
cache	./logging.h	/^	unsigned int cache; \/\/ logging has cache lines in memory$/;"	m	struct:logging
cache_max	./logging.h	/^	unsigned int cache_max; \/\/ cache_max lines in memory$/;"	m	struct:logging
cleaners_number	./a.h	/^	size_t cleaners_number; \/\/ NOTE: default 1$/;"	m	struct:a_s
clear_color	./logging.c	/^const char *clear_color = "\\e[0m";$/;"	v
color	./logging.c	/^const char *color[debug + 1] = $/;"	v
cook_number	./a.h	/^	size_t cook_number; \/\/ NOTE: default 1$/;"	m	struct:a_s
critical	./logging.h	/^	critical,		\/* critical conditions *\/$/;"	e	enum:elevel
debug	./logging.h	/^	debug,			\/* debug-level messages *\/$/;"	e	enum:elevel
diff	./logging.h	/^	time_t diff; \/\/ time interval$/;"	m	struct:logging
dishwasher_number	./a.h	/^	size_t dishwasher_number; \/\/ NOTE: default 1$/;"	m	struct:a_s
elevel	./logging.h	/^enum elevel {$/;"	g
emergency	./logging.h	/^	emergency,		\/* application is unusable *\/$/;"	e	enum:elevel
error	./logging.h	/^	error,			\/* error conditions *\/$/;"	e	enum:elevel
info	./logging.h	/^	info,			\/* informational *\/$/;"	e	enum:elevel
initializing	./logging.c	/^int initializing(const char *name, const char *path, const char *mode, enum elevel stream_level, enum elevel stdout_level, time_t diff, unsigned int cache_max, unsigned long size_max)$/;"	f
l	./logging.c	/^struct logging *l;$/;"	v	typeref:struct:logging
level	./logging.c	/^const char *level[debug + 1] = $/;"	v
lobby_manager_number	./a.h	/^	size_t lobby_manager_number; \/\/ NOTE: default 1$/;"	m	struct:a_s
logging	./logging.h	/^struct logging {$/;"	s
main	./a.c	/^int main(int argc, char **argv) {$/;"	f
mode	./logging.h	/^	char mode[MODE_MAX]; \/\/ logging file's mode$/;"	m	struct:logging
mutex	./a.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
name	./logging.h	/^	char name[NAME_MAX]; \/\/ program name$/;"	m	struct:logging
none	./logging.h	/^	none = -1,		\/* none logging *\/$/;"	e	enum:elevel
notice	./logging.h	/^	notice,			\/* normal but significant condition *\/$/;"	e	enum:elevel
number	./logging.h	/^	unsigned int number; \/\/ logging file's suffix number when splits file$/;"	m	struct:logging
path	./logging.h	/^	char path[PATH_MAX]; \/\/ logging file's path$/;"	m	struct:logging
pflush	./logging.c	/^int pflush()$/;"	f
pid	./logging.h	/^	pid_t pid; \/\/ program process id$/;"	m	struct:logging
plog	./logging.h	86;"	d
reception	./reception.c	/^void *reception(void *arg) {$/;"	f
reception_number	./a.h	/^	size_t reception_number; \/\/ NOTE: default 1$/;"	m	struct:a_s
size	./logging.h	/^	unsigned long size; \/\/ logging has written bytes in file$/;"	m	struct:logging
size_max	./logging.h	/^	unsigned long size_max; \/\/ size_max bytes in file$/;"	m	struct:logging
staff_number	./a.h	/^	size_t staff_number; \/\/ NOTE: default 10$/;"	m	struct:a_s
stdout_level	./logging.h	/^	enum elevel stdout_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
stream	./logging.h	/^	FILE *stream;$/;"	m	struct:logging
stream_level	./logging.h	/^	enum elevel stream_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
sysdate	./logging.c	/^int sysdate(char *str)$/;"	f
t0	./logging.h	/^	struct tm t0; \/\/ start time$/;"	m	struct:logging	typeref:struct:logging::tm
t1	./logging.h	/^	struct tm t1; \/\/ the last flush stream date\/time$/;"	m	struct:logging	typeref:struct:logging::tm
typist_number	./a.h	/^	size_t typist_number; \/\/ NOTE: default 1$/;"	m	struct:a_s
uninitialized	./logging.c	/^int uninitialized()$/;"	f
waiter	./waiter.c	/^void *waiter(void *arg) {$/;"	f
waiter_number	./a.h	/^	size_t waiter_number; \/\/ NOTE: default x$/;"	m	struct:a_s
warning	./logging.h	/^	warning,		\/* warning conditions *\/$/;"	e	enum:elevel
