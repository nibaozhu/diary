!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_HEADERS	Makefile	/^ALL_HEADERS  = a.h common.h reception.h waiter.h$/;"	m
ALL_OBJECTS	Makefile	/^ALL_OBJECTS  = $(subst .c,.o, $(ALL_SOURCES))$/;"	m
ALL_SOURCES	Makefile	/^ALL_SOURCES  = a.c reception.c waiter.c$/;"	m
AR	Makefile	/^AR           = ar$/;"	m
A_H	a.h	2;"	d
CEO	common.h	/^	CEO,$/;"	e	enum:HOTEL_STAFF
CEO_number	common.h	/^	size_t CEO_number; \/* Chief Execute Officer: only one *\/$/;"	m	struct:hotel_s
CFLAGS	Makefile	/^CFLAGS       = -g$/;"	m
CHAIRMAN	common.h	/^	CHAIRMAN,$/;"	e	enum:HOTEL_STAFF
CLEANERS	common.h	/^	CLEANERS,$/;"	e	enum:HOTEL_STAFF
COMMON_H	common.h	2;"	d
COOK	common.h	/^	COOK,$/;"	e	enum:HOTEL_STAFF
CPPFLAGS	Makefile	/^CPPFLAGS     = $/;"	m
CTAGS	Makefile	/^CTAGS        = ctags$/;"	m
DISHWASHER	common.h	/^	DISHWASHER,$/;"	e	enum:HOTEL_STAFF
GENERAL_MANAGER	common.h	/^	GENERAL_MANAGER,$/;"	e	enum:HOTEL_STAFF
HOTEL_NAME	a.c	4;"	d	file:
HOTEL_STAFF	common.h	/^enum HOTEL_STAFF$/;"	g
ID	common.h	/^	size_t ID;$/;"	m	struct:task_s
LDFLAGS	Makefile	/^LDFLAGS      = -pthread$/;"	m
LOBBY_MANAGER	common.h	/^	LOBBY_MANAGER,$/;"	e	enum:HOTEL_STAFF
MAKEFILE	Makefile	/^MAKEFILE     = Makefile$/;"	m
OUTPUT_OPT	Makefile	/^OUTPUT_OPT   = -o$/;"	m
PREFIX	Makefile	/^PREFIX       = \/usr\/local$/;"	m
PROGRAM	Makefile	/^PROGRAM      = a.out$/;"	m
RECEPTION	common.h	/^	RECEPTION,$/;"	e	enum:HOTEL_STAFF
RECEPTION_H	reception.h	2;"	d
RM	Makefile	/^RM           = rm$/;"	m
RM_OPT	Makefile	/^RM_OPT       = --force --recursive$/;"	m
TYPIST	common.h	/^	TYPIST,$/;"	e	enum:HOTEL_STAFF
UUID	common.h	/^	char UUID[UUID_LEN_STR + 1]; \/* Universal Unique ID *\/$/;"	m	struct:task_s
UUID	common.h	/^	const char UUID[UUID_LEN_STR + 1]; \/* Universal Unique ID *\/$/;"	m	struct:__anon1
WAITER	common.h	/^	WAITER,$/;"	e	enum:HOTEL_STAFF
WAITER_H	waiter.h	2;"	d
_GNU_SOURCE	common.h	13;"	d
bankruptcy	common.h	/^	bool bankruptcy;$/;"	m	struct:hotel_s
cache_max	common.h	/^	size_t cache_max; \/* line cache *\/$/;"	m	struct:hotel_s
chairman_number	common.h	/^	size_t chairman_number; \/* only one *\/$/;"	m	struct:hotel_s
cleaners_number	common.h	/^	size_t cleaners_number; \/* only one *\/$/;"	m	struct:hotel_s
cook_number	common.h	/^	size_t cook_number; \/* only one *\/$/;"	m	struct:hotel_s
default_task	a.c	/^const char default_task[4][3][PATH_MAX] = {$/;"	v
department_ID	common.h	/^	size_t department_ID;$/;"	m	struct:__anon1
diff_max	common.h	/^	size_t diff_max; \/* time interval *\/$/;"	m	struct:hotel_s
dishwasher_number	common.h	/^	size_t dishwasher_number; \/* only one *\/$/;"	m	struct:hotel_s
employee_ID	common.h	/^	size_t employee_ID;$/;"	m	struct:__anon1
entry	common.h	/^	SLIST_ENTRY(task_s) entry;$/;"	m	struct:task_s
general_manager_number	common.h	/^	size_t general_manager_number; \/* only one *\/$/;"	m	struct:hotel_s
handler	a.c	/^void handler(int signum) {$/;"	f
hotel	a.c	/^hotel_t hotel = { $/;"	v
hotel_name	common.h	/^	char hotel_name[NAME_MAX];$/;"	m	struct:hotel_s
hotel_s	common.h	/^typedef struct hotel_s {$/;"	s
hotel_t	common.h	/^} hotel_t;$/;"	t	typeref:struct:hotel_s
lobby_manager_number	common.h	/^	size_t lobby_manager_number; \/* only one *\/$/;"	m	struct:hotel_s
main	a.c	/^int main(int argc, char **argv) {$/;"	f
path	common.h	/^	char path[PATH_MAX];$/;"	m	struct:task_s
personal_information_t	common.h	/^} personal_information_t;$/;"	t	typeref:struct:__anon1
pid	common.h	/^	pid_t pid; \/* the process ID of the calling process *\/$/;"	m	struct:task_s
ppid	common.h	/^	pid_t ppid; \/* the process ID of the parent of the calling process *\/$/;"	m	struct:task_s
pthread	common.h	/^	pthread_t *pthread;$/;"	m	struct:hotel_s
ptid	common.h	/^	pthread_t ptid; \/* the ID of the calling thread$/;"	m	struct:task_s
reception	reception.c	/^void *reception(void *arg) {$/;"	f
reception_number	common.h	/^	size_t reception_number; \/* only one *\/$/;"	m	struct:hotel_s
set_disposition	a.c	/^void set_disposition(void) {$/;"	f
size_max	common.h	/^	size_t size_max; \/* file size *\/$/;"	m	struct:hotel_s
staff_number	common.h	/^	size_t staff_number; \/* default 10 *\/$/;"	m	struct:hotel_s
task_s	common.h	/^typedef struct task_s {$/;"	s
task_slist	common.h	/^	SLIST_HEAD(task_slist_s, task_s) *task_slist;$/;"	m	struct:__anon1
task_t	common.h	/^} task_t;$/;"	t	typeref:struct:task_s
tid	common.h	/^	pid_t tid; \/* the  callerâ€™s thread ID (TID) *\/$/;"	m	struct:task_s
typist_number	common.h	/^	size_t typist_number; \/* only one *\/$/;"	m	struct:hotel_s
waiter	waiter.c	/^void *waiter(void *arg) {$/;"	f
waiter_number	common.h	/^	size_t waiter_number; \/* default x *\/$/;"	m	struct:hotel_s
