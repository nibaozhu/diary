!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_HEADERS	Makefile	/^ALL_HEADERS  = chatd.h common.h worker.h$/;"	m
ALL_OBJECTS	Makefile	/^ALL_OBJECTS  = $(subst .c,.o, $(ALL_SOURCES))$/;"	m
ALL_SOURCES	Makefile	/^ALL_SOURCES  = chatd.c worker.c$/;"	m
AR	Makefile	/^AR           = ar$/;"	m
CFLAGS	Makefile	/^CFLAGS       = -g$/;"	m
CHATD_H	chatd.h	2;"	d
COMMON_H	common.h	2;"	d
CPPFLAGS	Makefile	/^CPPFLAGS     = $/;"	m
CTAGS	Makefile	/^CTAGS        = ctags$/;"	m
ID	common.h	/^	size_t ID;$/;"	m	struct:__anon1
ID	common.h	/^	size_t ID;$/;"	m	struct:task_s
LDFLAGS	Makefile	/^LDFLAGS      = -pthread$/;"	m
MAKEFILE	Makefile	/^MAKEFILE     = Makefile$/;"	m
OUTPUT_OPT	Makefile	/^OUTPUT_OPT   = -o$/;"	m
PREFIX	Makefile	/^PREFIX       = \/usr\/local$/;"	m
PROGRAM	Makefile	/^PROGRAM      = chatd$/;"	m
RM	Makefile	/^RM           = rm$/;"	m
RM_OPT	Makefile	/^RM_OPT       = --force --recursive$/;"	m
UUID	common.h	/^	char UUID[UUID_LEN_STR + 1]; \/* Universal Unique ID *\/$/;"	m	struct:task_s
UUID	common.h	/^	const char UUID[UUID_LEN_STR + 1]; \/* Universal Unique ID *\/$/;"	m	struct:__anon1
WORKER_H	worker.h	2;"	d
_GNU_SOURCE	common.h	13;"	d
bankruptcy	common.h	/^	bool bankruptcy;$/;"	m	struct:chatd_s
chatd	chatd.c	/^chatd_t chatd = { .chatd_name = "Happiness", .number = 0xf, .bankruptcy = false };$/;"	v
chatd_name	common.h	/^	char chatd_name[NAME_MAX];$/;"	m	struct:chatd_s
chatd_s	common.h	/^typedef struct chatd_s {$/;"	s
chatd_t	common.h	/^} chatd_t;$/;"	t	typeref:struct:chatd_s
entry	common.h	/^	SLIST_ENTRY(task_s) entry;$/;"	m	struct:task_s
handler	chatd.c	/^void handler(int signum) {$/;"	f
info_t	common.h	/^} info_t;$/;"	t	typeref:struct:__anon1
main	chatd.c	/^int main(int argc, char **argv) {$/;"	f
number	common.h	/^	size_t number;$/;"	m	struct:chatd_s
pid	common.h	/^	pid_t pid; \/* the process ID of the calling process *\/$/;"	m	struct:task_s
ppid	common.h	/^	pid_t ppid; \/* the process ID of the parent of the calling process *\/$/;"	m	struct:task_s
pthread	common.h	/^	pthread_t *pthread;$/;"	m	struct:chatd_s
ptid	common.h	/^	pthread_t ptid; \/* the ID of the calling thread$/;"	m	struct:task_s
set_disposition	chatd.c	/^void set_disposition(void) {$/;"	f
task_s	common.h	/^typedef struct task_s {$/;"	s
task_slist	common.h	/^	SLIST_HEAD(task_slist_s, task_s) *task_slist;$/;"	m	struct:__anon1
task_t	common.h	/^} task_t;$/;"	t	typeref:struct:task_s
tid	common.h	/^	pid_t tid; \/* the  callerâ€™s thread ID (TID) *\/$/;"	m	struct:task_s
worker	worker.c	/^void *worker(void *arg) {$/;"	f
