!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_HEADERS	Makefile	/^ALL_HEADERS  = a.h common.h logging.h reception.h waiter.h$/;"	m
ALL_OBJECTS	Makefile	/^ALL_OBJECTS  = $(subst .c,.o, $(ALL_SOURCES))$/;"	m
ALL_SOURCES	Makefile	/^ALL_SOURCES  = a.c logging.c reception.c waiter.c$/;"	m
AR	Makefile	/^AR           = ar$/;"	m
A_H	a.h	2;"	d
CEO_number	a.h	/^	size_t CEO_number; \/* Chief Execute Officer: only one *\/$/;"	m	struct:__anon1
CFLAGS	Makefile	/^CFLAGS       = -O0 -g$/;"	m
COMMON_H	common.h	2;"	d
CPPFLAGS	Makefile	/^CPPFLAGS     = -U DEBUG_LOGGING -U HH_MI_SS_XXXXXX$/;"	m
CTAGS	Makefile	/^CTAGS        = ctags$/;"	m
DATE_MAX	logging.h	44;"	d
ID	common.h	/^	size_t ID;$/;"	m	struct:task_s
LDFLAGS	Makefile	/^LDFLAGS      = -pthread$/;"	m
LOGGING_CACHE	logging.h	47;"	d
LOGGING_H	logging.h	9;"	d
LOGGING_INTERVAL	logging.h	46;"	d
LOGGING_SIZE	logging.h	48;"	d
MAKEFILE	Makefile	/^MAKEFILE     = Makefile$/;"	m
MODE_MAX	logging.h	43;"	d
OUTPUT_OPT	Makefile	/^OUTPUT_OPT   = -o$/;"	m
PROGRAM	Makefile	/^PROGRAM      = a.out$/;"	m
RECEPTION_H	reception.h	2;"	d
RM	Makefile	/^RM           = rm$/;"	m
RM_OPT	Makefile	/^RM_OPT       = --force --recursive$/;"	m
SIZE_MAX	logging.h	16;"	d
SIZE_MAX	logging.h	18;"	d
UUID	common.h	/^	char UUID[UUID_LEN_STR + 1]; \/* Universal Unique ID *\/$/;"	m	struct:task_s
UUID	common.h	/^	const char UUID[UUID_LEN_STR + 1]; \/* Universal Unique ID *\/$/;"	m	struct:__anon2
WAITER_H	waiter.h	2;"	d
_GNU_SOURCE	common.h	39;"	d
_GNU_SOURCE	logging.h	37;"	d
__flush	logging.c	/^static int __flush()$/;"	f	file:
__mutex	logging.c	/^static pthread_mutex_t __mutex;$/;"	v	file:
__mutexattr	logging.c	/^static pthread_mutexattr_t __mutexattr;$/;"	v	file:
__plog	logging.c	/^int __plog(enum elevel x, const char *__file, unsigned int __line, const char *__function, const char *fmt, ...)$/;"	f
__timestamp	logging.c	/^static int __timestamp(char *str)$/;"	f	file:
a_t	a.h	/^} a_t;$/;"	t	typeref:struct:__anon1
alert	logging.h	/^	alert,			\/* action must be taken immediately *\/$/;"	e	enum:elevel
cache	logging.h	/^	unsigned int cache; \/\/ logging has cache lines in memory$/;"	m	struct:logging
cache_max	a.h	/^	size_t cache_max;$/;"	m	struct:__anon1
cache_max	logging.h	/^	unsigned int cache_max; \/\/ cache_max lines in memory$/;"	m	struct:logging
chairman_number	a.h	/^	size_t chairman_number; \/* only one *\/$/;"	m	struct:__anon1
cleaners_number	a.h	/^	size_t cleaners_number; \/* default 1 *\/$/;"	m	struct:__anon1
clear_color	logging.c	/^static char *clear_color = "\\e[0m";$/;"	v	file:
color	logging.c	/^const char *color[debug + 1] = $/;"	v
cook_number	a.h	/^	size_t cook_number; \/* default 1 *\/$/;"	m	struct:__anon1
critical	logging.h	/^	critical,		\/* critical conditions *\/$/;"	e	enum:elevel
debug	logging.h	/^	debug,			\/* debug-level messages *\/$/;"	e	enum:elevel
default_task	a.c	/^const char default_task[4][3][PATH_MAX] = {$/;"	v
department_ID	common.h	/^	size_t department_ID;$/;"	m	struct:__anon2
diff_max	logging.h	/^	time_t diff_max; \/\/ time interval$/;"	m	struct:logging
dishwasher_number	a.h	/^	size_t dishwasher_number; \/* default 1 *\/$/;"	m	struct:__anon1
elevel	logging.h	/^enum elevel {$/;"	g
emergency	logging.h	/^	emergency,		\/* application is unusable *\/$/;"	e	enum:elevel
employee_ID	common.h	/^	size_t employee_ID;$/;"	m	struct:__anon2
entry	common.h	/^	SLIST_ENTRY(task_s) entry;$/;"	m	struct:task_s
error	logging.h	/^	error,			\/* error conditions *\/$/;"	e	enum:elevel
general_manger_number	a.h	/^	size_t general_manger_number; \/* only one *\/$/;"	m	struct:__anon1
info	logging.h	/^	info,			\/* informational *\/$/;"	e	enum:elevel
initializing	logging.c	/^int initializing(const char *name, const char *path, const char *mode, enum elevel stream_level, enum elevel stdout_level, time_t diff_max, unsigned int cache_max, unsigned long size_max)$/;"	f
l	logging.c	/^static struct logging *l;$/;"	v	typeref:struct:logging	file:
level	logging.c	/^const char *level[debug + 1] = $/;"	v
lobby_manager_number	a.h	/^	size_t lobby_manager_number; \/* default 1 *\/$/;"	m	struct:__anon1
logging	logging.h	/^struct logging {$/;"	s
main	a.c	/^int main(int argc, char **argv) {$/;"	f
mode	logging.h	/^	char mode[MODE_MAX]; \/\/ logging file's mode$/;"	m	struct:logging
name	logging.h	/^	char name[NAME_MAX]; \/\/ program name$/;"	m	struct:logging
none	logging.h	/^	none = -1,		\/* none logging *\/$/;"	e	enum:elevel
notice	logging.h	/^	notice,			\/* normal but significant condition *\/$/;"	e	enum:elevel
number	logging.h	/^	unsigned int number; \/\/ logging file's suffix number when splits file$/;"	m	struct:logging
path	common.h	/^	char path[PATH_MAX];$/;"	m	struct:task_s
path	logging.h	/^	char path[PATH_MAX]; \/\/ logging file's path$/;"	m	struct:logging
personal_information_t	common.h	/^} personal_information_t;$/;"	t	typeref:struct:__anon2
pid	common.h	/^	pid_t pid; \/* the process ID of the calling process *\/$/;"	m	struct:task_s
pid	logging.h	/^	pid_t pid; \/\/ program process id$/;"	m	struct:logging
plog	logging.h	89;"	d
ppid	common.h	/^	pid_t ppid; \/* the process ID of the parent of the calling process *\/$/;"	m	struct:task_s
ptid	common.h	/^	pthread_t ptid; \/* the ID of the calling thread(This is the same value that is returned in *thread in$/;"	m	struct:task_s
reception	reception.c	/^void *reception(void *arg) {$/;"	f
reception_number	a.h	/^	size_t reception_number; \/* default 1 *\/$/;"	m	struct:__anon1
size	logging.h	/^	unsigned long size; \/\/ logging has written bytes in file$/;"	m	struct:logging
size_max	a.h	/^	size_t size_max;$/;"	m	struct:__anon1
size_max	logging.h	/^	unsigned long size_max; \/\/ size_max bytes in file$/;"	m	struct:logging
staff_number	a.h	/^	size_t staff_number; \/* default 10 *\/$/;"	m	struct:__anon1
stdout_level	logging.h	/^	enum elevel stdout_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
stream	logging.h	/^	FILE *stream;$/;"	m	struct:logging
stream_level	logging.h	/^	enum elevel stream_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
t0	logging.h	/^	struct tm t0; \/\/ start time$/;"	m	struct:logging	typeref:struct:logging::tm
t1	logging.h	/^	struct tm t1; \/\/ the last flush stream date\/time$/;"	m	struct:logging	typeref:struct:logging::tm
task_s	common.h	/^typedef struct task_s {$/;"	s
task_slist	common.h	/^	SLIST_HEAD(task_slist_s, task_s) *task_slist;$/;"	m	struct:__anon2
task_t	common.h	/^} task_t;$/;"	t	typeref:struct:task_s
tid	common.h	/^	pid_t tid; \/* the  callerâ€™s thread ID (TID) *\/$/;"	m	struct:task_s
typist_number	a.h	/^	size_t typist_number; \/* default 1 *\/$/;"	m	struct:__anon1
uninitialized	logging.c	/^int uninitialized()$/;"	f
waiter	waiter.c	/^void *waiter(void *arg) {$/;"	f
waiter_number	a.h	/^	size_t waiter_number; \/* default x *\/$/;"	m	struct:__anon1
warning	logging.h	/^	warning,		\/* warning conditions *\/$/;"	e	enum:elevel
