// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hello.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hello {

namespace {

const ::google::protobuf::Descriptor* HeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRespond_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefaultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefaultRequest_Article_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultRequest_Article_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefaultRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultRespond_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hello_2eproto() {
  protobuf_AddDesc_hello_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hello.proto");
  GOOGLE_CHECK(file != NULL);
  HeartbeatRequest_descriptor_ = file->message_type(0);
  static const int HeartbeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, sequence_),
  };
  HeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRequest_descriptor_,
      HeartbeatRequest::default_instance_,
      HeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRequest));
  HeartbeatRespond_descriptor_ = file->message_type(1);
  static const int HeartbeatRespond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRespond, sequence_),
  };
  HeartbeatRespond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRespond_descriptor_,
      HeartbeatRespond::default_instance_,
      HeartbeatRespond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRespond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRespond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRespond));
  DefaultRequest_descriptor_ = file->message_type(2);
  static const int DefaultRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, column3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, column4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, column5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, column6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, column7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, articlelist_),
  };
  DefaultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefaultRequest_descriptor_,
      DefaultRequest::default_instance_,
      DefaultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefaultRequest));
  DefaultRequest_Article_descriptor_ = DefaultRequest_descriptor_->nested_type(0);
  static const int DefaultRequest_Article_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest_Article, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest_Article, author_),
  };
  DefaultRequest_Article_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefaultRequest_Article_descriptor_,
      DefaultRequest_Article::default_instance_,
      DefaultRequest_Article_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest_Article, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRequest_Article, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefaultRequest_Article));
  DefaultRespond_descriptor_ = file->message_type(3);
  static const int DefaultRespond_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRespond, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRespond, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRespond, return__),
  };
  DefaultRespond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DefaultRespond_descriptor_,
      DefaultRespond::default_instance_,
      DefaultRespond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRespond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultRespond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DefaultRespond));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hello_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRequest_descriptor_, &HeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRespond_descriptor_, &HeartbeatRespond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefaultRequest_descriptor_, &DefaultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefaultRequest_Article_descriptor_, &DefaultRequest_Article::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DefaultRespond_descriptor_, &DefaultRespond::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hello_2eproto() {
  delete HeartbeatRequest::default_instance_;
  delete HeartbeatRequest_reflection_;
  delete HeartbeatRespond::default_instance_;
  delete HeartbeatRespond_reflection_;
  delete DefaultRequest::default_instance_;
  delete DefaultRequest_reflection_;
  delete DefaultRequest_Article::default_instance_;
  delete DefaultRequest_Article_reflection_;
  delete DefaultRespond::default_instance_;
  delete DefaultRespond_reflection_;
}

void protobuf_AddDesc_hello_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013hello.proto\022\005hello\"$\n\020HeartbeatRequest"
    "\022\020\n\010sequence\030\001 \002(\t\"$\n\020HeartbeatRespond\022\020"
    "\n\010sequence\030\001 \002(\t\"\343\001\n\016DefaultRequest\022\020\n\010s"
    "equence\030\001 \002(\t\022\014\n\004type\030\002 \002(\005\022\017\n\007column3\030\003"
    " \002(\005\022\017\n\007column4\030\004 \002(\005\022\017\n\007column5\030\005 \002(\005\022\017"
    "\n\007column6\030\006 \002(\005\022\017\n\007column7\030\007 \002(\005\0222\n\013arti"
    "clelist\030\010 \003(\0132\035.hello.DefaultRequest.Art"
    "icle\032(\n\007Article\022\r\n\005title\030\001 \002(\t\022\016\n\006author"
    "\030\002 \002(\t\"@\n\016DefaultRespond\022\020\n\010sequence\030\001 \002"
    "(\t\022\014\n\004type\030\002 \002(\005\022\016\n\006return\030\003 \002(\t", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hello.proto", &protobuf_RegisterTypes);
  HeartbeatRequest::default_instance_ = new HeartbeatRequest();
  HeartbeatRespond::default_instance_ = new HeartbeatRespond();
  DefaultRequest::default_instance_ = new DefaultRequest();
  DefaultRequest_Article::default_instance_ = new DefaultRequest_Article();
  DefaultRespond::default_instance_ = new DefaultRespond();
  HeartbeatRequest::default_instance_->InitAsDefaultInstance();
  HeartbeatRespond::default_instance_->InitAsDefaultInstance();
  DefaultRequest::default_instance_->InitAsDefaultInstance();
  DefaultRequest_Article::default_instance_->InitAsDefaultInstance();
  DefaultRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hello_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hello_2eproto {
  StaticDescriptorInitializer_hello_2eproto() {
    protobuf_AddDesc_hello_2eproto();
  }
} static_descriptor_initializer_hello_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRequest::kSequenceFieldNumber;
#endif  // !_MSC_VER

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatRequest::InitAsDefaultInstance() {
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRequest::~HeartbeatRequest() {
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete sequence_;
  }
  if (this != default_instance_) {
  }
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRequest_descriptor_;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
  return *default_instance_;
}

HeartbeatRequest* HeartbeatRequest::default_instance_ = NULL;

HeartbeatRequest* HeartbeatRequest::New() const {
  return new HeartbeatRequest;
}

void HeartbeatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::kEmptyString) {
        sequence_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRequest_descriptor_;
  metadata.reflection = HeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRespond::kSequenceFieldNumber;
#endif  // !_MSC_VER

HeartbeatRespond::HeartbeatRespond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartbeatRespond::InitAsDefaultInstance() {
}

HeartbeatRespond::HeartbeatRespond(const HeartbeatRespond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartbeatRespond::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRespond::~HeartbeatRespond() {
  SharedDtor();
}

void HeartbeatRespond::SharedDtor() {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete sequence_;
  }
  if (this != default_instance_) {
  }
}

void HeartbeatRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRespond_descriptor_;
}

const HeartbeatRespond& HeartbeatRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
  return *default_instance_;
}

HeartbeatRespond* HeartbeatRespond::default_instance_ = NULL;

HeartbeatRespond* HeartbeatRespond::New() const {
  return new HeartbeatRespond;
}

void HeartbeatRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::kEmptyString) {
        sequence_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartbeatRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartbeatRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartbeatRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRespond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRespond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRespond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRespond::MergeFrom(const HeartbeatRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRespond::CopyFrom(const HeartbeatRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRespond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartbeatRespond::Swap(HeartbeatRespond* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRespond_descriptor_;
  metadata.reflection = HeartbeatRespond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DefaultRequest_Article::kTitleFieldNumber;
const int DefaultRequest_Article::kAuthorFieldNumber;
#endif  // !_MSC_VER

DefaultRequest_Article::DefaultRequest_Article()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DefaultRequest_Article::InitAsDefaultInstance() {
}

DefaultRequest_Article::DefaultRequest_Article(const DefaultRequest_Article& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DefaultRequest_Article::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefaultRequest_Article::~DefaultRequest_Article() {
  SharedDtor();
}

void DefaultRequest_Article::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (this != default_instance_) {
  }
}

void DefaultRequest_Article::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefaultRequest_Article::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultRequest_Article_descriptor_;
}

const DefaultRequest_Article& DefaultRequest_Article::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
  return *default_instance_;
}

DefaultRequest_Article* DefaultRequest_Article::default_instance_ = NULL;

DefaultRequest_Article* DefaultRequest_Article::New() const {
  return new DefaultRequest_Article;
}

void DefaultRequest_Article::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::kEmptyString) {
        author_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefaultRequest_Article::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_author;
        break;
      }

      // required string author = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefaultRequest_Article::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // required string author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->author(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefaultRequest_Article::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefaultRequest_Article::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string author = 2;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefaultRequest_Article::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefaultRequest_Article* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefaultRequest_Article*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefaultRequest_Article::MergeFrom(const DefaultRequest_Article& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefaultRequest_Article::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultRequest_Article::CopyFrom(const DefaultRequest_Article& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRequest_Article::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DefaultRequest_Article::Swap(DefaultRequest_Article* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(author_, other->author_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefaultRequest_Article::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultRequest_Article_descriptor_;
  metadata.reflection = DefaultRequest_Article_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DefaultRequest::kSequenceFieldNumber;
const int DefaultRequest::kTypeFieldNumber;
const int DefaultRequest::kColumn3FieldNumber;
const int DefaultRequest::kColumn4FieldNumber;
const int DefaultRequest::kColumn5FieldNumber;
const int DefaultRequest::kColumn6FieldNumber;
const int DefaultRequest::kColumn7FieldNumber;
const int DefaultRequest::kArticlelistFieldNumber;
#endif  // !_MSC_VER

DefaultRequest::DefaultRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DefaultRequest::InitAsDefaultInstance() {
}

DefaultRequest::DefaultRequest(const DefaultRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DefaultRequest::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  column3_ = 0;
  column4_ = 0;
  column5_ = 0;
  column6_ = 0;
  column7_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefaultRequest::~DefaultRequest() {
  SharedDtor();
}

void DefaultRequest::SharedDtor() {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete sequence_;
  }
  if (this != default_instance_) {
  }
}

void DefaultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefaultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultRequest_descriptor_;
}

const DefaultRequest& DefaultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
  return *default_instance_;
}

DefaultRequest* DefaultRequest::default_instance_ = NULL;

DefaultRequest* DefaultRequest::New() const {
  return new DefaultRequest;
}

void DefaultRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::kEmptyString) {
        sequence_->clear();
      }
    }
    type_ = 0;
    column3_ = 0;
    column4_ = 0;
    column5_ = 0;
    column6_ = 0;
    column7_ = 0;
  }
  articlelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefaultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_column3;
        break;
      }

      // required int32 column3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column3_)));
          set_has_column3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_column4;
        break;
      }

      // required int32 column4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column4_)));
          set_has_column4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_column5;
        break;
      }

      // required int32 column5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column5_)));
          set_has_column5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_column6;
        break;
      }

      // required int32 column6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column6_)));
          set_has_column6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_column7;
        break;
      }

      // required int32 column7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column7_)));
          set_has_column7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_articlelist;
        break;
      }

      // repeated .hello.DefaultRequest.Article articlelist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_articlelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_articlelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_articlelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefaultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sequence(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 column3 = 3;
  if (has_column3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->column3(), output);
  }

  // required int32 column4 = 4;
  if (has_column4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->column4(), output);
  }

  // required int32 column5 = 5;
  if (has_column5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->column5(), output);
  }

  // required int32 column6 = 6;
  if (has_column6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->column6(), output);
  }

  // required int32 column7 = 7;
  if (has_column7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->column7(), output);
  }

  // repeated .hello.DefaultRequest.Article articlelist = 8;
  for (int i = 0; i < this->articlelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->articlelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefaultRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 column3 = 3;
  if (has_column3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->column3(), target);
  }

  // required int32 column4 = 4;
  if (has_column4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->column4(), target);
  }

  // required int32 column5 = 5;
  if (has_column5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->column5(), target);
  }

  // required int32 column6 = 6;
  if (has_column6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->column6(), target);
  }

  // required int32 column7 = 7;
  if (has_column7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->column7(), target);
  }

  // repeated .hello.DefaultRequest.Article articlelist = 8;
  for (int i = 0; i < this->articlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->articlelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefaultRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 column3 = 3;
    if (has_column3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column3());
    }

    // required int32 column4 = 4;
    if (has_column4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column4());
    }

    // required int32 column5 = 5;
    if (has_column5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column5());
    }

    // required int32 column6 = 6;
    if (has_column6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column6());
    }

    // required int32 column7 = 7;
    if (has_column7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column7());
    }

  }
  // repeated .hello.DefaultRequest.Article articlelist = 8;
  total_size += 1 * this->articlelist_size();
  for (int i = 0; i < this->articlelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->articlelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefaultRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefaultRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefaultRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefaultRequest::MergeFrom(const DefaultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  articlelist_.MergeFrom(from.articlelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_column3()) {
      set_column3(from.column3());
    }
    if (from.has_column4()) {
      set_column4(from.column4());
    }
    if (from.has_column5()) {
      set_column5(from.column5());
    }
    if (from.has_column6()) {
      set_column6(from.column6());
    }
    if (from.has_column7()) {
      set_column7(from.column7());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefaultRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultRequest::CopyFrom(const DefaultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < articlelist_size(); i++) {
    if (!this->articlelist(i).IsInitialized()) return false;
  }
  return true;
}

void DefaultRequest::Swap(DefaultRequest* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(type_, other->type_);
    std::swap(column3_, other->column3_);
    std::swap(column4_, other->column4_);
    std::swap(column5_, other->column5_);
    std::swap(column6_, other->column6_);
    std::swap(column7_, other->column7_);
    articlelist_.Swap(&other->articlelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefaultRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultRequest_descriptor_;
  metadata.reflection = DefaultRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DefaultRespond::kSequenceFieldNumber;
const int DefaultRespond::kTypeFieldNumber;
const int DefaultRespond::kReturnFieldNumber;
#endif  // !_MSC_VER

DefaultRespond::DefaultRespond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DefaultRespond::InitAsDefaultInstance() {
}

DefaultRespond::DefaultRespond(const DefaultRespond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DefaultRespond::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  return__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefaultRespond::~DefaultRespond() {
  SharedDtor();
}

void DefaultRespond::SharedDtor() {
  if (sequence_ != &::google::protobuf::internal::kEmptyString) {
    delete sequence_;
  }
  if (return__ != &::google::protobuf::internal::kEmptyString) {
    delete return__;
  }
  if (this != default_instance_) {
  }
}

void DefaultRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefaultRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultRespond_descriptor_;
}

const DefaultRespond& DefaultRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
  return *default_instance_;
}

DefaultRespond* DefaultRespond::default_instance_ = NULL;

DefaultRespond* DefaultRespond::New() const {
  return new DefaultRespond;
}

void DefaultRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sequence()) {
      if (sequence_ != &::google::protobuf::internal::kEmptyString) {
        sequence_->clear();
      }
    }
    type_ = 0;
    if (has_return_()) {
      if (return__ != &::google::protobuf::internal::kEmptyString) {
        return__->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DefaultRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sequence().data(), this->sequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_return;
        break;
      }

      // required string return = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_return:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_return_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->return_().data(), this->return_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefaultRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sequence(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required string return = 3;
  if (has_return_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_().data(), this->return_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->return_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DefaultRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sequence().data(), this->sequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required string return = 3;
  if (has_return_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->return_().data(), this->return_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->return_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DefaultRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string return = 3;
    if (has_return_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->return_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefaultRespond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DefaultRespond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DefaultRespond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefaultRespond::MergeFrom(const DefaultRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_return_()) {
      set_return_(from.return_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DefaultRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultRespond::CopyFrom(const DefaultRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRespond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DefaultRespond::Swap(DefaultRespond* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(type_, other->type_);
    std::swap(return__, other->return__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DefaultRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultRespond_descriptor_;
  metadata.reflection = DefaultRespond_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hello

// @@protoc_insertion_point(global_scope)
